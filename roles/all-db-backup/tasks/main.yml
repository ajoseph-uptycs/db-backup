---

- name: stop dockerized PSQL containers
  become: yes
  command: docker-compose down
  args:
    chdir: "/opt/uptycs/etc/postgres/{{ item }}"
  with_items:
    - configdb
    - metastoredb
    - statedb

- name: Create BaseBackup & wal_files_archive directories
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ uptycs_service_user }}"
    group: "{{ uptycs_service_user }}"
    recurse: yes
  with_items:
    - "{{ backup_path }}/configdb"
    - "{{ backup_path }}/metastoredb"
    - "{{ backup_path }}/statedb"
    - "/pg/configdb/backup/walfiles_archive"
    - "/pg/metastoredb/backup/walfiles_archive"
    - "/pg/statedb/backup/walfiles_archive"


- name: Backup postgresql.conf 
  become: yes
  copy:
    src: "/opt/uptycs/etc/postgres/{{ item }}/postgresql.conf"
    dest: "/opt/uptycs/etc/postgres/{{ item }}/postgresql.conf-original"
    remote_src: yes
  with_items:
    - configdb
    - metastoredb
    - statedb


# Create Symlinks to place DOCKER:/pg/backup/walfiles_archive = HOST://pg/<DB-NAME>/backup/walfiles-archive 
# INSIDE common Backupdirectory on HOST (backup_path)

- name: Create Symlinks for walfiles-archive directories
  become: yes
  file:
    src: "{{ item.key }}"
    dest: "{{ item.value }}"
    state: link
    owner: "{{ uptycs_service_user }}"
    group: "{{ uptycs_service_user }}"
  loop: "{{ symlinks | dict2items }}"
  vars:
    symlinks:
      /pg/configdb/backup/walfiles_archive: "{{ backup_path }}/configdb/walfiles_archive"
      /pg/metastoredb/backup/walfiles_archive: "{{ backup_path }}/metastoredb/walfiles_archive"
      /pg/statedb/backup/walfiles_archive: "{{ backup_path }}/statedb/walfiles_archive"


- name: Add PG Backup settings to configdb/postgresql.conf
  become: yes
  lineinfile:
    dest: "/opt/uptycs/etc/postgres/configdb/postgresql.conf"
    insertafter: EOF
    line: "{{ item }}"
    state: present
  with_items:
    - "#=== ENABLE WAL ARCHIVING ==="
    - archive_mode = on
    - wal_level = logical
    - "archive_command = 'test ! -f /pg/backup/walfiles_archive/%f && cp %p /pg/backup/walfiles_archive/%f'"


- name: Add PG Backup settings to metastoredb/postgresql.conf
  become: yes
  lineinfile:
    dest: "/opt/uptycs/etc/postgres/metastoredb/postgresql.conf"
    insertafter: EOF
    line: "{{ item }}"
    state: present
  with_items:
    - "#=== ENABLE WAL ARCHIVING ==="
    - archive_mode = on
    - wal_level = logical
    - "archive_command = 'test ! -f /pg/backup/walfiles_archive/%f && cp %p /pg/backup/walfiles_archive/%f'"

- name: Add PG Backup settings to statedb/postgresql.conf
  become: yes
  lineinfile:
    dest: "/opt/uptycs/etc/postgres/statedb/postgresql.conf"
    insertafter: EOF
    line: "{{ item }}"
    state: present
  with_items:
    - "#=== ENABLE WAL ARCHIVING ==="
    - archive_mode = on
    - wal_level = logical
    - "archive_command = 'test ! -f /pg/backup/walfiles_archive/%f && cp %p /pg/backup/walfiles_archive/%f'"


- name: Add replication user to configdb/pg_hba.conf
  become: yes
  lineinfile:
    dest: "/opt/uptycs/etc/postgres/configdb/pg_hba.conf"
    insertafter: EOF
    line: "{{ item }}"
    state: present
  with_items:
    - 'host  replication {{ replication_user }}  127.0.0.1/32    md5'

- name: Add replication user to metastoredb/pg_hba.conf
  become: yes
  lineinfile:
    dest: "/opt/uptycs/etc/postgres/metastoredb/pg_hba.conf"
    insertafter: EOF
    line: "{{ item }}"
    state: present
  with_items:
    - 'host  replication {{ replication_user }}  127.0.0.1/32    md5'


- name: Add replication user to statedb/pg_hba.conf
  become: yes
  lineinfile:
    dest: "/opt/uptycs/etc/postgres/statedb/pg_hba.conf"
    insertafter: EOF
    line: "{{ item }}"
    state: present
  with_items:
    - 'host  replication {{ replication_user }}  127.0.0.1/32    md5'


# - name: Backup docker-compose.yml

# - name: Generate docker-compose.yml with backup Volumes

- name: start dockerized PSQL containers
  become: yes
  command: docker-compose up -d
  args:
    chdir: "/opt/uptycs/etc/postgres/{{ item }}"
  with_items:
    - configdb
    - metastoredb
    - statedb


- name: Check status of Databases
  postgresql_ping:
    db: "{{ item.key }}"
    login_host: localhost
    port: "{{ item.value }}"
    login_user: "{{ replication_user }}"
    login_password: "{{ replication_user_pw }}"
  loop: "{{ db_port | dict2items }}"
  vars:
    db_port:
      configdb: 5432
      metastoredb: 5433
      statedb: 5434


- name: Force PostgreSQL to switch to a new WAL file
  postgresql_query:
    login_host: localhost
    port: "{{ item }}"
    login_user: '{{ replication_user }}'
    login_password: '{{ replication_user_pw }}'
    query: SELECT pg_switch_wal();
  with_items:
    - 5432
    - 5433
    - 5434


# - name: Check wal_files_archive to confirm new WAL is generated

- name: Take Initial PG_BASEBACKUP of ConfigDB
  become: yes
  shell: >
     printf "`date`" >> "{{ basebackup_log }}" &&
     printf "\n########## STARTING PG_BASEBACKUP of ConfigDB ##########\n\n" >> "{{ basebackup_log }}" &&
     export PGPASSWORD="{{ replication_user_pw }}" && pg_basebackup -h localhost -p 5432 
     -U postgres -D "{{ backup_path }}"/configdb/basebackup/
     --tablespace-mapping=/data/pgdata/configdb="{{ backup_path }}"/configdb/pg_tblspc-24576
     --waldir="{{ backup_path }}"/configdb/basebackup-pg_wal -P -v --wal-method=stream >> "{{ basebackup_log }}" 2>&1 


- name: Take Initial PG_BASEBACKUP of MetastoreDB
  become: yes
  shell: >
     printf "`date`" >> "{{ basebackup_log }}" &&
     printf "\n########## STARTING PG_BASEBACKUP of MetastoreDB ##########\n\n" >> "{{ basebackup_log }}" &&
     export PGPASSWORD="{{ replication_user_pw }}" && pg_basebackup -h localhost -p 5433
     -U postgres -D "{{ backup_path }}"/metastoredb/basebackup/
     --tablespace-mapping=/data/pgdata/metastoredb="{{ backup_path }}"/metastoredb/pg_tblspc-24576
     --waldir="{{ backup_path }}"/metastoredb/basebackup-pg_wal -P -v --wal-method=stream  >> "{{ basebackup_log }}" 2>&1
  

- name: Take Initial PG_BASEBACKUP of StateDB
  become: yes
  shell: >
     printf "`date`" >> "{{ basebackup_log }}" &&
     printf "\n########## STARTING PG_BASEBACKUP of StateDB ##########\n\n" >> "{{ basebackup_log }}" &&
     export PGPASSWORD="{{ replication_user_pw }}" && pg_basebackup -h localhost -p 5434 
     -U postgres -D "{{ backup_path }}"/statedb/basebackup/
     --tablespace-mapping=/data/pgdata/statedb="{{ backup_path }}"/statedb/pg_tblspc-24576
     --waldir="{{ backup_path }}"/statedb/basebackup-pg_wal -P -v --wal-method=stream >> "{{ basebackup_log }}" 2>&1 &&
     printf "\n\n ************ END ********** \n\n" >> "{{ basebackup_log }}" 2>&1


- name: Sync Initial PG_BASEBACKUP & WAL archives to S3 
  become: yes
  shell: aws s3 sync "{{ backup_path }}" "{{ s3_db_backup_url }}"

- name: Add crontab for s3 sync
  become: yes
  cron:
    name: "Sync DB-Backup to s3"
    minute: "0"
    hour: "12"
    user: ubuntu
    job: aws s3 sync "{{ backup_path }}" "{{ s3_db_backup_url }}"
    cron_file: db-back-s3sync

- name: Add crontab for periodic BaseBackup & New WAL files 
  become: yes
  cron:
    name: "Create New BaseBackup"
    minute: "0"
    hour: "12"
    user: ubuntu
    job: ansible -i apj.ini db-backup-rotate.yml
    cron_file: db-backup-rotate
