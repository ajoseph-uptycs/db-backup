---

- name: stop dockerized PSQL containers
  become: yes
  command: docker-compose down
  args:
    chdir: "/opt/uptycs/etc/postgres/{{ item }}"
  with_items:
    - configdb
    - metastoredb
    - statedb

# These Directories Used only at the time of BASEBACKUP. And are not required to be mounted to docker. 
# It will be available inside docker as parent directory /pg/configdb/backup is already mounted.

- name: Create BaseBackup & wal_files_archive directories
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ uptycs_service_user }}"
    group: "{{ uptycs_service_user }}"
    recurse: yes
  with_items:
    - /pg/configdb/backup/basebackup
    - /pg/metastoredb/backup/basebackup
    - /pg/metastoredb/backup/basebackup


# /pg/<DB-NAME>/backup/     is Mounted inside Each DB Container as /pg/backup 

- name: Create WAL-files-archive directories
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ uptycs_service_user }}"
    group: "{{ uptycs_service_user }}"
    recurse: yes
  with_items:
    - /pg/configdb/backup/walfiles-archive
    - /pg/metastoredb/backup/walfiles-archive
    - /pg/statedb/backup/walfiles-archive



- name: Backup postgresql.conf 
  become: yes
  copy:
    src: "/opt/uptycs/etc/postgres/{{ item }}/postgresql.conf"
    dest: "/opt/uptycs/etc/postgres/{{ item }}/postgresql.conf-original"
    remote_src: yes
  with_items:
    - configdb
    - metastoredb
    - statedb


# /pg/backup/walfiles-archive/ is available in all DB containers. But mounted from different locations in HOST

- name: Add PG Backup settings to configdb/postgresql.conf
  become: yes
  lineinfile:
    dest: "/opt/uptycs/etc/postgres/configdb/postgresql.conf"
    insertafter: EOF
    line: "{{ item }}"
    state: present
  with_items:
    - "#=== ENABLE WAL ARCHIVING ==="
    - archive_mode = on
    - wal_level = logical
    - "archive_command = 'test ! -f /pg/backup/walfiles-archive/%f && cp %p /pg/backup/walfiles-archive/%f'"


- name: Add PG Backup settings to metastoredb/postgresql.conf
  become: yes
  lineinfile:
    dest: "/opt/uptycs/etc/postgres/metastoredb/postgresql.conf"
    insertafter: EOF
    line: "{{ item }}"
    state: present
  with_items:
    - "#=== ENABLE WAL ARCHIVING ==="
    - archive_mode = on
    - wal_level = logical
    - "archive_command = 'test ! -f /pg/backup/walfiles-archive/%f && cp %p /pg/backup/walfiles-archive/%f'"


- name: Add PG Backup settings to statedb/postgresql.conf
  become: yes
  lineinfile:
    dest: "/opt/uptycs/etc/postgres/statedb/postgresql.conf"
    insertafter: EOF
    line: "{{ item }}"
    state: present
  with_items:
    - "#=== ENABLE WAL ARCHIVING ==="
    - archive_mode = on
    - wal_level = logical
    - "archive_command = 'test ! -f /pg/backup/walfiles-archive/%f && cp %p /pg/backup/walfiles-archive/%f'"



- name: Add replication user to configdb/pg_hba.conf
  become: yes
  lineinfile:
    dest: "/opt/uptycs/etc/postgres/configdb/pg_hba.conf"
    insertafter: EOF
    line: "{{ item }}"
    state: present
  with_items:
    - 'host  replication {{ replication_user }}  127.0.0.1/32    md5'


- name: Add replication user to metastoredb/pg_hba.conf
  become: yes
  lineinfile:
    dest: "/opt/uptycs/etc/postgres/metastoredb/pg_hba.conf"
    insertafter: EOF
    line: "{{ item }}"
    state: present
  with_items:
    - 'host  replication {{ replication_user }}  127.0.0.1/32    md5'


- name: Add replication user to statedb/pg_hba.conf
  become: yes
  lineinfile:
    dest: "/opt/uptycs/etc/postgres/statedb/pg_hba.conf"
    insertafter: EOF
    line: "{{ item }}"
    state: present
  with_items:
    - 'host  replication {{ replication_user }}  127.0.0.1/32    md5'


# - name: Backup docker-compose.yml

# - name: Generate docker-compose.yml with backup Volumes

- name: start dockerized PSQL containers
  become: yes
  command: docker-compose up -d
  args:
    chdir: "/opt/uptycs/etc/postgres/{{ item }}"
  with_items:
    - configdb
    - metastoredb
    - statedb


- name: Check status of Databases
  postgresql_ping:
    db: "{{ item.key }}"
    login_host: localhost
    port: "{{ item.value }}"
    login_user: "{{ replication_user }}"
    login_password: "{{ replication_user_pw }}"
  loop: "{{ db_port | dict2items }}"
  vars:
    db_port:
      configdb: 5432
      metastoredb: 5433
      statedb: 5434


- name: Force PostgreSQL to switch to a new WAL file
  postgresql_query:
    login_host: localhost
    port: "{{ item }}"
    login_user: '{{ replication_user }}'
    login_password: '{{ replication_user_pw }}'
    query: SELECT pg_switch_wal();
  with_items:
    - 5432
    - 5433
    - 5434


# - name: Check wal_files_archive to confirm new WAL is generated

- name: Take Initial PG_BASEBACKUP of ConfigDB
  become: yes
  shell: >
     printf "`date`" >> {{ basebackup-log }} &&
     printf "\n########## STARTING PG_BASEBACKUP of ConfigDB ##########\n\n" >> {{ basebackup-log }}
     export PGPASSWORD="{{ replication_user_pw }}" && pg_basebackup -h localhost -p 5432 
     -U postgres -D /pg/backup/configdb/basebackup
     --tablespace-mapping=/pg/backup/configdb/basebackup/pg_tblspc-24576
     --waldir=/pg/backup/configdb/basebackup/basebackup-pg_wal -P -v >> {{ basebackup-log }} 2>&1


- name: Take Initial PG_BASEBACKUP of MetastoreDB
  become: yes
  shell: >
     printf "`date`" >> {{ basebackup-log }} &&
     printf "\n########## STARTING PG_BASEBACKUP of MetastoreDB ##########\n\n" >> {{ basebackup-log }}
     export PGPASSWORD="{{ replication_user_pw }}" && pg_basebackup -h localhost -p 5433
     -U postgres -D /pg/backup/metastoredb/basebackup
     --tablespace-mapping=/pg/backup/metastoredb/basebackup/pg_tblspc-24576
     --waldir=/pg/backup/metastoredb/basebackup/basebackup-pg_wal -P -v >> {{ basebackup-log }} 2>&1


- name: Take Initial PG_BASEBACKUP of StateDB
  become: yes
  shell: >
     printf "`date`" >> {{ basebackup-log }} &&
     printf "\n########## STARTING PG_BASEBACKUP of StateDB ##########\n\n" >> {{ basebackup-log }}
     export PGPASSWORD="{{ replication_user_pw }}" && pg_basebackup -h localhost -p 5434 
     -U postgres -D /pg/backup/statedb/basebackup
     --tablespace-mapping=/pg/backup/statedb/basebackup/pg_tblspc-24576
     --waldir=/pg/backup/statedb/basebackup/basebackup-pg_wal -P -v >> {{ basebackup-log }} 2>&1


- name: Sync PG_BASEBACKUP & WAL archives to S3 
  become: yes
  shell: aws s3 sync "{{ backup_path }}" "{{ s3_db_backup_url }}"

- name: Add crontab for s3 sync
  become: yes
  cron:
    name: "Sync DB-Backup to s3"
    minute: "0"
    hour: "12"
    user: ubuntu
    job: aws s3 sync "{{ backup_path }}" "{{ s3_db_backup_url }}"
    cron_file: db-back-s3sync

- name: Add crontab for periodic BaseBackup
  become: yes
  cron:
    name: "Create New BaseBackup"
    minute: "0"
    hour: "12"
    user: ubuntu
    job: echo "test periodic task" > /tmp/test-periodic-task.txt
    cron_file: db-back-s3sync
